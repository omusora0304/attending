import{T as g,a as C,c as q,d as E,q as f,l as F,o as w,w as p,g as T}from"./Ddin1ii5.js";import{f as d}from"./DRTtKfAx.js";const P=c=>d(c,"yyyy-MM"),h=(c,m)=>{const o=P(m);return q(E,"records",c,o)},v=async(c,m,o=new Date)=>{try{console.log("記録追加開始:",{memberId:c,type:m,timestamp:o});const a=h(c,o);console.log("コレクション参照:",a.path);const n={type:m,timestamp:g.fromDate(o),memberId:c,deleted:!1};if(m==="out"){console.log("退出処理: 最後の入室記録を検索");const t=await j(c);if(console.log("最後の入室記録:",t),t){const e=Math.round((o.getTime()-t.timestamp.getTime())/6e4);console.log("滞在時間（分）:",e),n.duration=Math.max(0,e);const s=d(t.timestamp,"yyyy-MM-dd"),y=d(o,"yyyy-MM-dd");console.log("日付チェック:",{inDate:s,outDate:y}),n.inTimestamp=g.fromDate(t.timestamp),s!==y&&(n.crossesDays=!0,console.log("日をまたいでいる記録を検出"))}else console.log("対応する入室記録が見つかりません"),n.duration=0}console.log("保存するレコード:",n);const l=await C(a,n);return console.log("記録の追加完了:",l.id),l.id}catch(a){throw console.error("Failed to add record:",a),new Error("記録の追加に失敗しました。再度お試しください。")}},j=async c=>{const m=new Date;console.log("最後の入室記録を検索開始:",{memberId:c,currentDate:d(m,"yyyy-MM-dd")});const o=[0,-1].map(t=>{const e=new Date(m);return e.setMonth(e.getMonth()+t),e});console.log("検索対象の月:",o.map(t=>d(t,"yyyy-MM")));const a=o.map(t=>{const e=h(c,t);return console.log("コレクション参照:",e.path),f(e,p("type","==","in"),w("timestamp","desc"),F(1))}),n=await Promise.all(a.map(t=>T(t)));console.log("クエリ結果:",n.map(t=>t.size));const l=n.flatMap(t=>t.docs.map(e=>{const s=e.data();return s.deleted?null:{id:e.id,memberId:s.memberId,type:s.type,timestamp:s.timestamp.toDate()}})).filter(t=>t!==null);if(console.log("見つかった入室記録:",l.length),l.length>0){const t=l.sort((e,s)=>s.timestamp.getTime()-e.timestamp.getTime())[0];return console.log("最新の入室記録:",{id:t.id,timestamp:d(t.timestamp,"yyyy-MM-dd HH:mm:ss")}),t}return console.log("入室記録が見つかりませんでした"),null},I=async(c,m=7)=>{const o=new Date,a=new Date(o);a.setDate(a.getDate()-m);const n=h(c,o),l=new Date(o);l.setMonth(l.getMonth()-1);const t=h(c,l),e=f(n,p("timestamp",">=",g.fromDate(a)),w("timestamp","desc")),s=f(t,p("timestamp",">=",g.fromDate(a)),w("timestamp","desc")),[y,R]=await Promise.all([T(e),T(s)]);return[...y.docs,...R.docs].filter(r=>!r.data().deleted).map(r=>{const i=r.data();return{id:r.id,memberId:i.memberId,type:i.type,timestamp:i.timestamp.toDate(),duration:i.duration}}).sort((r,i)=>i.timestamp.getTime()-r.timestamp.getTime())},Y=async(c,m,o)=>{const a=new Date(m);a.setDate(a.getDate()-1);const n=new Date(o);n.setDate(n.getDate()+1),console.log("検索期間（調整前）:",{startDate:d(m,"yyyy-MM-dd"),endDate:d(o,"yyyy-MM-dd")}),console.log("検索期間（調整後）:",{adjustedStartDate:d(a,"yyyy-MM-dd"),adjustedEndDate:d(n,"yyyy-MM-dd")});const l=[],t=new Date(a.getFullYear(),a.getMonth(),1),e=new Date(n.getFullYear(),n.getMonth(),1);console.log("検索対象の月範囲:",{startMonth:d(t,"yyyy-MM"),endMonth:d(e,"yyyy-MM")});let s=new Date(t);for(;s<=e;)l.push(new Date(s)),console.log("検索対象の月:",d(s,"yyyy-MM")),s=new Date(s.getFullYear(),s.getMonth()+1,1);console.log("検索対象の月一覧:",l.map(r=>d(r,"yyyy-MM")));const y=l.map(r=>{const i=h(c,r);return console.log("コレクション参照:",i.path),f(i,p("timestamp",">=",g.fromDate(m)),p("timestamp","<=",g.fromDate(o)),w("timestamp"))}),R=await Promise.all(y.map(r=>T(r))),u=[];return R.forEach((r,i)=>{console.log(`月 ${d(l[i],"yyyy-MM")} の記録数:`,r.size),r.docs.filter(D=>!D.data().deleted).forEach(D=>{const M=D.data();u.push({id:D.id,memberId:M.memberId,type:M.type,timestamp:M.timestamp.toDate(),duration:M.duration})})}),console.log("取得した記録の総数:",u.length),u.sort((r,i)=>r.timestamp.getTime()-i.timestamp.getTime())};export{v as a,Y as b,I as g};
